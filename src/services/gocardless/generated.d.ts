/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v2/accounts/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Access account metadata.
         *
         *     Information about the account record, such as the processing status and IBAN.
         *
         *     Account status is recalculated based on the error count in the latest req. */
        get: operations["retrieve account metadata"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/accounts/{id}/balances/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Access account balances.
         *
         *     Balances will be returned in Berlin Group PSD2 format. */
        get: operations["retrieve account balances"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/accounts/{id}/details/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Access account details.
         *
         *     Account details will be returned in Berlin Group PSD2 format. */
        get: operations["retrieve account details"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/accounts/{id}/transactions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Access account transactions.
         *
         *     Transactions will be returned in Berlin Group PSD2 format. */
        get: operations["retrieve account transactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/agreements/enduser/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all End User Agreements belonging to the company */
        get: operations["retrieve all agreements"];
        put?: never;
        /** @description API endpoints related to end-user agreements. */
        post: operations["create EUA"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/agreements/enduser/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve end user agreement by ID */
        get: operations["retrieve EUA by id"];
        put?: never;
        post?: never;
        /** @description Delete an end user agreement */
        delete: operations["delete EUA by id"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/agreements/enduser/{id}/accept/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Accept an end-user agreement via the API */
        put: operations["accept EUA"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/agreements/enduser/{id}/reconfirm/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve EUA reconfirmation */
        get: operations["Retrieve EUA reconfirmation"];
        put?: never;
        /** @description Create EUA reconfirmation */
        post: operations["Create EUA reconfirmation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/institutions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all available institutions */
        get: operations["retrieve all supported Institutions in a given country"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/institutions/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get details about a specific Institution and its supported features */
        get: operations["retrieve institution"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/requisitions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all requisitions belonging to the company */
        get: operations["retrieve all requisitions"];
        put?: never;
        /** @description Create a new requisition */
        post: operations["Create requisition"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/requisitions/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a requisition by ID */
        get: operations["requisition by id"];
        put?: never;
        post?: never;
        /** @description Delete requisition and its end user agreement */
        delete: operations["delete requisition by id"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/token/new/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Obtain JWT pair */
        post: operations["Obtain new access/refresh token pair"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/token/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Refresh access token */
        post: operations["Get a new access token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description AccountSerializer. */
        Account: {
            /**
             * Format: uuid
             * @description The ID of this Account, used to refer to this account in other API calls.
             */
            readonly id?: string;
            /**
             * Format: date-time
             * @description The date & time at which the account object was created.
             */
            readonly created?: string;
            /**
             * Format: date-time
             * @description The date & time at which the account object was last accessed.
             */
            readonly last_accessed?: string;
            /** @description The Account IBAN */
            readonly iban?: string;
            /** @description The Account BBAN */
            readonly bban?: string;
            /** @description The processing status of this account. */
            readonly status?: string;
            /** @description The ASPSP associated with this account. */
            readonly institution_id?: string;
            /** @description The name of the account owner. */
            readonly owner_name?: string;
            /** @description The name of account. */
            readonly name?: string;
        };
        /** @description AccountBalanceSerializer. */
        AccountBalance: {
            balances?: components["schemas"]["BalanceSchema"][];
        };
        /** @description AccountDetailSerializer. */
        AccountDetail: {
            /** @description account */
            account: components["schemas"]["DetailSchema"];
        };
        /** @description AccountSchema. */
        AccountSchema: {
            /** @description iban */
            iban?: string;
            /** @description bban */
            bban?: string;
            /** @description pan */
            pan?: string;
            /** @description maskedPan */
            maskedPan?: string;
            /** @description msisdn */
            msisdn?: string;
            /** @description currency */
            currency?: string;
        };
        /** @description AccountTransactionsSerializer. */
        AccountTransactions: {
            /** @description transactions */
            transactions: components["schemas"]["BankTransaction"];
            /**
             * Format: date-time
             * @description The last time the account transactions were updated
             */
            readonly last_updated?: string;
        };
        /** @description AdditionalAccountDataSchema. */
        AdditionalAccountDataSchema: {
            /** @description secondaryIdentification */
            secondaryIdentification?: string;
        };
        /** @description BalanceAfterTransactionSchema. */
        BalanceAfterTransactionSchema: {
            /** @description amount */
            amount: string;
            /** @description currency */
            currency?: string;
        };
        /** @description BalanceAmountSchema. */
        BalanceAmountSchema: {
            /** @description amount */
            amount: string;
            /** @description currency */
            currency: string;
        };
        /** @description BalanceSchema. */
        BalanceSchema: {
            /** @description balanceAmount */
            balanceAmount: components["schemas"]["BalanceAmountSchema"];
            /** @description balanceType */
            balanceType: string;
            /** @description creditLimitIncluded */
            creditLimitIncluded?: boolean;
            /** @description lastChangeDateTime */
            lastChangeDateTime?: string;
            /** @description referenceDate */
            referenceDate?: string;
            /** @description lastCommittedTransaction */
            lastCommittedTransaction?: string;
        };
        /** @description BankTransactionSerializer. */
        BankTransaction: {
            booked: components["schemas"]["TransactionSchema"][];
            pending?: components["schemas"]["TransactionSchema"][];
        };
        /** @description CurrencyExchangeSchema. */
        CurrencyExchangeSchema: {
            /** @description sourceCurrency */
            sourceCurrency?: string;
            /** @description exchangeRate */
            exchangeRate?: string;
            /** @description unitCurrency */
            unitCurrency?: string;
            /** @description targetCurrency */
            targetCurrency?: string;
            /** @description quotationDate */
            quotationDate?: string;
            /** @description contractIdentification */
            contractIdentification?: string;
        };
        /** @description DetailSchema. */
        DetailSchema: {
            /** @description resourceId */
            resourceId?: string;
            /** @description iban */
            iban?: string;
            /** @description bban */
            bban?: string;
            /** @description SortCodeAccountNumber returned by some UK banks (6 digit Sort Code and 8 digit Account Number) */
            scan?: string;
            /** @description msisdn */
            msisdn?: string;
            /** @description currency */
            currency?: string;
            /** @description ownerName */
            ownerName?: string;
            /** @description name */
            name?: string;
            /** @description displayName */
            displayName?: string;
            /** @description product */
            product?: string;
            /** @description cashAccountType */
            cashAccountType?: string;
            /** @description status */
            status?: string;
            /** @description bic */
            bic?: string;
            /** @description linkedAccounts */
            linkedAccounts?: string;
            /** @description maskedPan */
            maskedPan?: string;
            /** @description usage */
            usage?: string;
            /** @description details */
            details?: string;
            /** @description ownerAddressUnstructured */
            ownerAddressUnstructured?: string[];
            /** @description ownerAddressStructured */
            ownerAddressStructured?: components["schemas"]["OwnerAddressStructuredSchema"];
            /** @description additionalAccountData used for information that is outside of Berlin Group specification, such as bank or country-specific fields */
            additionalAccountData?: components["schemas"]["AdditionalAccountDataSchema"];
        };
        /** @description Represents an end-user agreement. */
        EndUserAgreement: {
            /**
             * End User Agreement ID
             * Format: uuid
             * @description The ID of this End User Agreement, used to refer to this end user agreement in other API calls.
             */
            readonly id?: string;
            /**
             * Created Date
             * Format: date-time
             * @description The date & time at which the end user agreement was created.
             */
            readonly created?: string;
            /** @description an Institution ID for this EUA */
            institution_id: string;
            /**
             * Maximum Historical Days
             * @description Maximum number of days of transaction data to retrieve.
             * @default 90
             */
            max_historical_days: number;
            /**
             * Access Valid For (Days)
             * @description Number of days from acceptance that the access can be used.
             * @default 90
             */
            access_valid_for_days: number;
            /**
             * Level of information to access (by default all)
             * @description Array containing one or several values of ['balances', 'details', 'transactions']
             * @default [
             *       "balances",
             *       "details",
             *       "transactions"
             *     ]
             */
            access_scope: unknown[];
            /**
             * Accepted Date
             * Format: date-time
             * @description The date & time at which the end user accepted the agreement.
             */
            readonly accepted?: string | null;
            /**
             * @description if this agreement can be extended. Supported by GB banks only.
             * @default false
             */
            reconfirmation: boolean;
        };
        /** @description Represents an end-user agreement. */
        EndUserAgreementRequest: {
            /** @description an Institution ID for this EUA */
            institution_id: string;
            /**
             * Maximum Historical Days
             * @description Maximum number of days of transaction data to retrieve.
             * @default 90
             */
            max_historical_days: number;
            /**
             * Access Valid For (Days)
             * @description Number of days from acceptance that the access can be used.
             * @default 90
             */
            access_valid_for_days: number;
            /**
             * Level of information to access (by default all)
             * @description Array containing one or several values of ['balances', 'details', 'transactions']
             * @default [
             *       "balances",
             *       "details",
             *       "transactions"
             *     ]
             */
            access_scope: unknown[];
            /**
             * @description if this agreement can be extended. Supported by GB banks only.
             * @default false
             */
            reconfirmation: boolean;
        };
        /** @description Represents end-user details. */
        EnduserAcceptanceDetailsRequest: {
            /** user agent string for the end user */
            user_agent: string;
            /** end user IP address */
            ip_address: string;
        };
        ErrorResponse: {
            summary: string;
            detail: string;
            type?: string;
            status_code: number;
        };
        /** @description Represents an Integration. */
        Integration: {
            id: string;
            name: string;
            bic?: string;
            /** @default 90 */
            transaction_total_days: string;
            max_access_valid_for_days?: string;
            countries: string[];
            logo: string;
        };
        /** @description IntegrationSerializer for Retrieve endpoint. */
        IntegrationRetrieve: {
            id: string;
            name: string;
            bic?: string;
            /** @default 90 */
            transaction_total_days: string;
            max_access_valid_for_days?: string;
            countries: string[];
            logo: string;
            supported_features: unknown[];
            identification_codes: unknown[];
        };
        /** @description Obtain JWT pair. */
        JWTObtainPairRequest: {
            /** @description Secret id from /user-secrets/ */
            secret_id: string;
            /** @description Secret key from /user-secrets/ */
            secret_key: string;
        };
        /** @description Refresh access token. */
        JWTRefreshRequest: {
            refresh: string;
        };
        /** @description OwnerAddressStructuredSchema. */
        OwnerAddressStructuredSchema: {
            /** @description streetName */
            streetName?: string;
            /** @description buildingNumber */
            buildingNumber?: string;
            /** @description townName */
            townName?: string;
            /** @description postCode */
            postCode?: string;
            /** @description country */
            country?: string;
        };
        PaginatedEndUserAgreementList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example https://bankaccountdata.gocardless.com/api/v2/agreements/enduser/?limit=100&offset=0
             */
            next?: string | null;
            /**
             * Format: uri
             * @example https://bankaccountdata.gocardless.com/api/v2/agreements/enduser/?limit=100&offset=0
             */
            previous?: string | null;
            results: components["schemas"]["EndUserAgreement"][];
        };
        PaginatedRequisitionList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example https://bankaccountdata.gocardless.com/api/v2/requisitions/?limit=100&offset=0
             */
            next?: string | null;
            /**
             * Format: uri
             * @example https://bankaccountdata.gocardless.com/api/v2/requisitions/?limit=100&offset=0
             */
            previous?: string | null;
            results: components["schemas"]["Requisition"][];
        };
        /** @description EUA reconfirmation. */
        ReconfirmationRetrieve: {
            /**
             * Format: uri
             * @description Reconfirmation URL to be provided to PSU.
             */
            readonly reconfirmation_url?: string;
            /**
             * Format: date-time
             * @description Reconfirmation creation time
             */
            readonly created?: string;
            /**
             * Format: date-time
             * @description Datetime from when PSU will be able to access reconfirmation URL.
             */
            readonly url_valid_from?: string;
            /**
             * Format: date-time
             * @description Datetime until when PSU will be able to access reconfirmation URL.
             */
            readonly url_valid_to?: string;
            /**
             * redirect_url
             * Format: uri
             * @description Optional redirect URL for reconfirmation to override requisition's redirect.
             */
            redirect?: string | null;
            /**
             * Format: date-time
             * @description Last time when reconfirmation was accessed (this does not mean that it was accessed by PSU).
             */
            readonly last_accessed?: string | null;
            /**
             * Format: date-time
             * @description Last time reconfirmation was submitted (it can be submitted multiple times).
             */
            readonly last_submitted?: string | null;
            /**
             * @description Dictionary of accounts and their reconfirm and reject timestamps
             * @example {
             *       "64a985ae-4427-4a27-bd36-fd625fe6e1fc": {
             *         "reconfirmed": "2025-01-14T15:20:56.942817Z",
             *         "rejected": ""
             *       },
             *       "cd2fbd71-15f7-4607-bea2-fbd80311a013": {
             *         "reconfirmed": "",
             *         "rejected": ""
             *       }
             *     }
             */
            readonly accounts?: Record<string, never>;
        };
        /** @description EUA reconfirmation. */
        ReconfirmationRetrieveRequest: {
            /**
             * redirect_url
             * Format: uri
             * @description Optional redirect URL for reconfirmation to override requisition's redirect.
             */
            redirect?: string | null;
        };
        /** @description RequisitionSerializer. */
        Requisition: {
            /** Format: uuid */
            readonly id?: string;
            /**
             * Created Date
             * Format: date-time
             * @description The date & time at which the requisition was created.
             */
            readonly created?: string | null;
            /**
             * Format: uri
             * @description redirect URL to your application after end-user authorization with ASPSP
             */
            redirect: string | null;
            /**
             * Requisition status
             * @description status of this requisition
             */
            readonly status?: components["schemas"]["StatusEnum"];
            /** @description an Institution ID for this Requisition */
            institution_id: string;
            /**
             * Format: uuid
             * @description EUA associated with this requisition
             */
            agreement?: string;
            /** @description additional ID to identify the end user */
            reference?: string;
            /** @description array of account IDs retrieved within a scope of this requisition */
            readonly accounts?: string[];
            /** @description A two-letter country code (ISO 639-1) */
            user_language?: string;
            /**
             * Format: uri
             * @description link to initiate authorization with Institution
             * @default https://ob.gocardless.com/psd2/start/3fa85f64-5717-4562-b3fc-2c963f66afa6/SANDBOXFINANCE_SFIN0000
             */
            readonly link: string;
            /** @description optional SSN field to verify ownership of the account */
            ssn?: string;
            /**
             * @description option to enable account selection view for the end user
             * @default false
             */
            account_selection: boolean;
            /**
             * @description enable redirect back to the client after account list received
             * @default false
             */
            redirect_immediate: boolean;
        };
        /** @description RequisitionSerializer. */
        RequisitionRequest: {
            /**
             * Format: uri
             * @description redirect URL to your application after end-user authorization with ASPSP
             */
            redirect: string | null;
            /** @description an Institution ID for this Requisition */
            institution_id: string;
            /**
             * Format: uuid
             * @description EUA associated with this requisition
             */
            agreement?: string;
            /** @description additional ID to identify the end user */
            reference?: string;
            /** @description A two-letter country code (ISO 639-1) */
            user_language?: string;
            /** @description optional SSN field to verify ownership of the account */
            ssn?: string;
            /**
             * @description option to enable account selection view for the end user
             * @default false
             */
            account_selection: boolean;
            /**
             * @description enable redirect back to the client after account list received
             * @default false
             */
            redirect_immediate: boolean;
        };
        /** @description Obtain new JWT pair. */
        SpectacularJWTObtain: {
            /** @description Your access token */
            readonly access?: string;
            /**
             * @description Access token expires in seconds
             * @default 86400
             */
            readonly access_expires: number;
            /** @description Your refresh token */
            readonly refresh?: string;
            /**
             * @description Refresh token expires in seconds
             * @default 2592000
             */
            readonly refresh_expires: number;
        };
        /** @description Refresh Access token. */
        SpectacularJWTRefresh: {
            /** @description Your access token */
            readonly access?: string;
            /**
             * @description Access token expires in seconds
             * @default 86400
             */
            readonly access_expires: number;
        };
        /** @description Create requisition. */
        SpectacularRequisition: {
            /** Format: uuid */
            readonly id?: string;
            /**
             * Created Date
             * Format: date-time
             * @description The date & time at which the requisition was created.
             */
            readonly created?: string | null;
            /**
             * Format: uri
             * @description redirect URL to your application after end-user authorization with ASPSP
             */
            redirect: string | null;
            /**
             * Requisition status
             * @description status of this requisition
             */
            readonly status?: components["schemas"]["StatusEnum"];
            /** @description an Institution ID for this Requisition */
            institution_id: string;
            /**
             * Format: uuid
             * @description EUA associated with this requisition
             */
            agreement?: string;
            /** @description additional ID to identify the end user */
            reference?: string;
            /**
             * @description array of account IDs retrieved within a scope of this requisition
             * @default []
             */
            readonly accounts: unknown[];
            /** @description A two-letter country code (ISO 639-1) */
            user_language?: string;
            /**
             * Format: uri
             * @description link to initiate authorization with Institution
             * @default https://ob.gocardless.com/psd2/start/3fa85f64-5717-4562-b3fc-2c963f66afa6/SANDBOXFINANCE_SFIN0000
             */
            readonly link: string;
            /** @description optional SSN field to verify ownership of the account */
            ssn?: string;
            /**
             * @description option to enable account selection view for the end user
             * @default false
             */
            account_selection: boolean;
            /**
             * @description enable redirect back to the client after account list received
             * @default false
             */
            redirect_immediate: boolean;
        };
        /** @enum {string} */
        StatusEnum: "CR" | "ID" | "LN" | "RJ" | "ER" | "SU" | "EX" | "GC" | "UA" | "GA" | "SA";
        SuccessfulDeleteResponse: {
            summary: string;
            detail: string;
        };
        /** @description TransactionAmountSchema. */
        TransactionAmountSchema: {
            /** @description amount */
            amount: string;
            /** @description currency */
            currency: string;
        };
        /** @description TransactionSchema. */
        TransactionSchema: {
            /** @description transactionId */
            transactionId?: string;
            /** @description entryReference */
            entryReference?: string;
            /** @description endToEndId */
            endToEndId?: string;
            /** @description mandateId */
            mandateId?: string;
            /** @description checkId */
            checkId?: string;
            /** @description creditorId */
            creditorId?: string;
            /** @description bookingDate */
            bookingDate?: string;
            /** @description valueDate */
            valueDate?: string;
            /** @description bookingDateTime */
            bookingDateTime?: string;
            /** @description valueDateTime */
            valueDateTime?: string;
            /** @description transactionAmount */
            transactionAmount: components["schemas"]["TransactionAmountSchema"];
            currencyExchange?: components["schemas"]["CurrencyExchangeSchema"][];
            /** @description creditorName */
            creditorName?: string;
            /** @description creditorAccount */
            creditorAccount?: components["schemas"]["AccountSchema"];
            /** @description ultimateCreditor */
            ultimateCreditor?: string;
            /** @description debtorName */
            debtorName?: string;
            /** @description debtorAccount */
            debtorAccount?: components["schemas"]["AccountSchema"];
            /** @description ultimateDebtor */
            ultimateDebtor?: string;
            /** @description remittanceInformationUnstructured */
            remittanceInformationUnstructured?: string;
            /** @description remittanceInformationUnstructuredArray */
            remittanceInformationUnstructuredArray?: string[];
            /** @description remittanceInformationStructured */
            remittanceInformationStructured?: string;
            /** @description remittanceInformationStructuredArray */
            remittanceInformationStructuredArray?: string[];
            /** @description additionalInformation */
            additionalInformation?: string;
            /** @description purposeCode */
            purposeCode?: string;
            /** @description bankTransactionCode */
            bankTransactionCode?: string;
            /** @description proprietaryBankTransactionCode */
            proprietaryBankTransactionCode?: string;
            /** @description internalTransactionId */
            internalTransactionId?: string;
            /** @description balanceAfterTransaction */
            balanceAfterTransaction?: components["schemas"]["BalanceAfterTransactionSchema"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "retrieve account metadata": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Sample account metadata */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Token is invalid or expired */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description IP address not whitelisted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Account not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "retrieve account balances": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Sample account balances */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountBalance"];
                };
            };
            /** @description Invalid Account ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description AccountInactiveError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description AccountResourceUnavailable */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Account not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Account state does not support this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description RateLimitError */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Couldn't update account balances */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description ConnectionError */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "retrieve account details": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Sample account details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountDetail"];
                };
            };
            /** @description Invalid Account ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description AccountInactiveError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description AccountResourceUnavailable */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Account not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Account state does not support this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description RateLimitError */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Couldn't update account details */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description ConnectionError */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "retrieve account transactions": {
        parameters: {
            query?: {
                date_from?: string;
                date_to?: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Sample account transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountTransactions"];
                };
            };
            /** @description Incorrect date range in query parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description AccountInactiveError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description AccountResourceUnavailable */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Account not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Account state does not support this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description RateLimitError */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Couldn't update account transactions */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description ConnectionError */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "retrieve all agreements": {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial zero-based index from which to return the results. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all end user agreements */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedEndUserAgreementList"];
                };
            };
            /** @description Token is invalid or expired */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description IP address not whitelisted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not found error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "create EUA": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EndUserAgreementRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["EndUserAgreementRequest"];
                "multipart/form-data": components["schemas"]["EndUserAgreementRequest"];
            };
        };
        responses: {
            /** @description Create enduser agreement */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndUserAgreement"];
                };
            };
            /** @description Reconfirmation is not allowed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Token is invalid or expired */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Free usage limit exceeded */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Reconfirmation is not enabled for this company. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "retrieve EUA by id": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this end user agreement. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve end user agreement by ID */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndUserAgreement"];
                };
            };
            /** @description Invalid ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Token is invalid or expired */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description IP address not whitelisted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not found error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "delete EUA by id": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this end user agreement. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessfulDeleteResponse"];
                };
            };
            /** @description Invalid ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Token is invalid or expired */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description IP address not whitelisted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not found error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "accept EUA": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this end user agreement. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EnduserAcceptanceDetailsRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["EnduserAcceptanceDetailsRequest"];
                "multipart/form-data": components["schemas"]["EnduserAcceptanceDetailsRequest"];
            };
        };
        responses: {
            /** @description Accept end user agreement */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndUserAgreement"];
                };
            };
            /** @description Invalid ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Token is invalid or expired */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description IP address not whitelisted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not found error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description End User Agreements cannot be accepted more than once */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "Retrieve EUA reconfirmation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this end user agreement. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reconfirmation details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReconfirmationRetrieve"];
                };
            };
            /** @description EUA does not have reconfirmation flag set. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Token is invalid or expired */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Reconfirmation is not enabled for this company. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not found error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "Create EUA reconfirmation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this end user agreement. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ReconfirmationRetrieveRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ReconfirmationRetrieveRequest"];
                "multipart/form-data": components["schemas"]["ReconfirmationRetrieveRequest"];
            };
        };
        responses: {
            /** @description Reconfirmation created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReconfirmationRetrieve"];
                };
            };
            /** @description There are no accounts linked. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Token is invalid or expired */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Reconfirmation is not enabled for this company. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not found error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "retrieve all supported Institutions in a given country": {
        parameters: {
            query?: {
                /** @description Boolean value, indicating if access scopes are supported */
                access_scopes_supported?: string;
                /** @description Boolean value, indicating if account selection is supported */
                account_selection_supported?: string;
                /** @description Boolean value, indicating if business accounts are supported */
                business_accounts_supported?: string;
                /** @description Boolean value, indicating if card accounts are supported */
                card_accounts_supported?: string;
                /** @description Boolean value, indicating if corporate accounts are supported */
                corporate_accounts_supported?: string;
                /** @description ISO 3166 two-character country code */
                country?: string;
                /** @description Boolean value, indicating if pending transactions are supported */
                pending_transactions_supported?: string;
                /** @description Boolean value, indicating if private accounts are supported */
                private_accounts_supported?: string;
                /** @description Boolean value, indicating if debtor account can be read before submitting payment */
                read_debtor_account_supported?: string;
                /** @description Boolean value, indicating if read refund account is supported */
                read_refund_account_supported?: string;
                /** @description Boolean value, indicating if separate consent for continuous history is supported */
                separate_continuous_history_consent_supported?: string;
                /** @description Boolean value, indicating if ssn verification is supported */
                ssn_verification_supported?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of supported Institutions in the country */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Integration"][];
                };
            };
            /** @description Unknown Fields */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Token is invalid or expired */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description IP address not whitelisted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not found error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "retrieve institution": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve institution by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IntegrationRetrieve"];
                };
            };
            /** @description Token is invalid or expired */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description IP address not whitelisted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not found error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "retrieve all requisitions": {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial zero-based index from which to return the results. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve all requisitions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRequisitionList"];
                };
            };
            /** @description Unknown Fields */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Token is invalid or expired */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description IP address not whitelisted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not found error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "Create requisition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequisitionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RequisitionRequest"];
                "multipart/form-data": components["schemas"]["RequisitionRequest"];
            };
        };
        responses: {
            /** @description Requisition has been successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpectacularRequisition"];
                };
            };
            /** @description Field is required */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Token is invalid or expired */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Free usage limit exceeded */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description IP address not whitelisted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Errors related to 'agreement' field. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "requisition by id": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this requisition. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get requisition by ID */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Requisition"];
                };
            };
            /** @description Invalid ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Token is invalid or expired */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description IP address not whitelisted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not found error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "delete requisition by id": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this requisition. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessfulDeleteResponse"];
                };
            };
            /** @description Invalid ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Token is invalid or expired */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description IP address not whitelisted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not found error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "Obtain new access/refresh token pair": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JWTObtainPairRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["JWTObtainPairRequest"];
                "multipart/form-data": components["schemas"]["JWTObtainPairRequest"];
            };
        };
        responses: {
            /** @description Obtain JWT response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpectacularJWTObtain"];
                };
            };
            /** @description Incorrect secret key or id */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description IP address not whitelisted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "Get a new access token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JWTRefreshRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["JWTRefreshRequest"];
                "multipart/form-data": components["schemas"]["JWTRefreshRequest"];
            };
        };
        responses: {
            /** @description Refresh access token. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpectacularJWTRefresh"];
                };
            };
            /** @description Token is invalid or expired */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description IP address not whitelisted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
